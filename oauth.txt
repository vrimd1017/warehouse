OAuth2.
3개의 참여자.각각은?
1) 나의 서비스. mine. opentutorials,org
2) 사용자. user
3) 이용하려는 서비스. their. Goggle/facebook/twitter

사용자를 대신해서 그들의 서비스를 접근하도록 허가를 받는 것.

id/password는 사용자 입장에서는 자신의 아이디/비밀번호를 처음보는 서비스에 맡기는 상황. 간단하고 강력하지만  위험함.
정보의 유출 보안사고의 문제.

mine입장에서도, 유실됬을 경우 겪게 될 고초가 심함.

그들의 입장에서도 신리할수없는 제 3자가 사용자의 정보를 가지는건 불만족할 상황임

--> 0Auth.

변화.
access Token이라는 일종의 토큰.
id/password 가 아니고
모든 기능이 아닌 필요한 서비스만 부분적으로 허용해줌.

accessToken을 통해 그들의 서비스에 접근. 

Login with Facebook/Google 이런 기능 구현이 가능함.

--

구도/용어 정리.

(1) web/app / mine/service
(2) user.
(3) their. google-calendar service

목록정보
가공을 통한 가치 제공목표.
어떻게?

우리가 만들려고 하는 것. - Client.
사용자 - 정보/자원 - Resource server.
Resource의 주인 - Resource owner

OAuth = 표준화된 기술.
사용하는 용어 익숙해져야함.

기존에는 id/pwd를 owner로부터 받아 필요시마다 resource server에 전송.
모든 정보 접근. 강력.
심각한 단점. 보안.
누군지도 모르는사람에게 사용자 정보를? 
--> 버려짐.

OAuth. 표준화된 기술.
Client. 행적적인 작업을 해야 함.
사용하고자 하는 ResourceServer에 등록.
우리의 서버는 당신의 서비스를 사용할것이란 것을 등록.
--> 서비스 식별을 위한 ClientID와 Client Secret 두개의 값을 발급해줌.
2개의 값을 자기 서버의 id와 sercret으로 잘 저장.
secret정보는 절대 노출되면 안됨.

2.
owner에게 client가 부탁해야 함.
resource server에게 이러한 정보를 사용하겠다고 한 것을 허락받아 주세요.
이러이러한 이유로 client서비스에서는 resource server의 서비스를 사용합니다. 승인해주세요.

3. 로그인 안됬으면 login창을 띄움.
이후, 현재 client가 당신의 resource server에 있는 정보를 사용하려고 함. 동의하나요? 응 보감 하면 
ResourceServer가 Client에게, 정보를 주게됨. 
pwd정보. 어떤? 
승인했다는 어떤 정보를 client에게 줌.
-->Code.
일종의 비밀번호. 서버에 저장된, 사용하고자 하는 기능을 사용할 수 있도록 한 인증. 
Code값과 원래 보관하던 id, secret
3개의 정보를 담아서 다시 ResourceServer에게 보냄.
ResourceServer는 client에 보낸 code, 
client가 자신임을 증명하는 id/secret
세가지 값을 비교하여, 현재 요청한 client가 owner가 인증한 client인지를 판단.
맞다면, client에게 중요한 정보를 발급해줌. --> access token.
진짜 비밀번호.
이를 db/file저장
이를 이용하여 실제 resourceServer에 자원을 요청.
ResourceServer는 아, 내가 발급한적 있던 토큰이네. 하면서 데이터를 제공.
client는 받은 데이터를 통해서 가공/ owner에게 서비스 제공.

중간에 더 많은 보안관련 사항이라던가 여러가지가 있음.

SDK.라는 도구를 제공.
원리를 모르면 해당 도구를 쉽게 사용할 수 없음.
음...SDK...

--

client운영을 위해서는 resourceserver에게 승인 필요.
id/secret정보를 받아야 함.
사용자 인증 정보.
ouath클라이언트 아이디 만들기.
동의화면.
제품이름은 표시되는거.
그냥 저장. ㅇㅅㅇ
웹 어플리케이션. 생성.
--> oauth클라이언트와 보안 비밀번호.
secret은 절대 노출되면 안됨.

다운받아서, 프로젝트 폴더에 저장.
file이 생기고, 해당 file안에는 인증받은 정보가 저장되어있음.

scope이라는 개념.
어떤 정보를 가져오는 행위.
혹은 특정한 일부 데이터.를 의미함.

scopes. 어떤작업을 할 것인지 resourceserver와 owner에게 알려주는것.

---

client id/secret을 받음 db라던가 등등에 저장.
인증센터에서 어떤 서비스를 사용할것인지를 선택.
정보가 유출되도 최소한의 정보만 유출되도록.
owner와 resourceserver에 어떤 정보에 접근할것인지를 알려주기 위해  센터에서 지정한 기능 혹은 그중에 일부를 지정해주는 것.
scope.

owner의 인증 정보가 필요함. 아직 있는건 client에 대한 인증뿐임.
-->access token이 필요함. 

1. cient접속.
2. resource서버에 인증요청.
3. resource서버에 인증요청/로그인/
4. scopeList전시. 이러한 기능 요청중이다.
5. code. resourceserver가 이러한 정보를 볼수있게 하겠다라는 허락/비밀번호 같은 것. 
client에게 전달하게되면, 이를직접 사용하는것은 아님.
6.AuthorizeCode와 Client의 ID와 Client의 Secret 3가지 정보를 하나로 묶음.
이를 ResourceServer에 다시 보냄.
7.이 클라이언트가 이 code에 해당하는 행위. 이 클라이언트가 맞는지 id/secret을 거쳐 확인하고. 
8. client에게 accessToken을 제공.
9. client는 accessToken을 이용하여 ResourceServer에 api의 사용이 가능해짐.

---

3번. 
Redirect to Google's Resource Server.
인증요청했을때 구글로 리다이렉트 시켜주는 그부분.
scope. 우리가 원하는 그 기능.
accessType. 클라이언트가 계속 가지고있는것은 위험. 생명주기가 있음.
online/offline방식.
offline지정시 resourceserver가 최종적으로 accessToken을 줄 때refresh token이라는 값도 같이 줌.
client는 accessToken과 refreshtoken을 둘다 저장했다가 accessToken만료시 refreshtoken을 다시 보내서 다시 accessToken을 받을 수 있음.
redirect_uri. code값을 다시 client에게 보내줄 때, 어느 주소로 client에게 보내주면 client가 code를 받을 수 잇는가.
response_type. 어떤 정보를 요청하는것인지
client_id 는 client_id.

onlien url encode.
url에 사용할 수 있는 파라미터로 컨버트 해주는 것.
원래는 줄바꿈이라던가 사용할 수 없음.

주소가 등록되어있지 않다면,
승인된 리다이렉션 URI에 붙여넣기로 저장하면 
저 주소는 authorizedCode를 받겠다, 라는것을 인증.

계정이 여러개라면 계정을 선택하게 함.
이런걸 요청했느데 허용할거냐? 라는게 나옴.
허용하면 리다이렉션이 됨. 어떤 주소로.
가장중요한것은 code와 code의 값.
code의값이 사용자가 resource서버로 가서 scope를 허용받고, 전달받은 권한? 데이터에 대한 code임.

------

resource server에서 url을 보내 줌.
제일 중요한건 code.
딱 한번만 사용 가능함. 참고.

이전 그 순서대로라면
code/clientid/clientsecret을 
resourceserver에 보내고
결과로 accessToken을 받아야 함.

Exchange autorization code for refresh and accessh Token.

POST방식으로 정보를 보내야 함.
<form>
+사진참고.

redirceturi. 이전에 했었음.
최종적인 인증을 다시 accessToken을 받음.
이때, resoureceServer는 리다이렉션하지않고 accessToken을 출력해줌.
redirectionurl는. 이전에 redirect했던 uri와 똑같은 값을 줘야 함.
_ Form은 자동으로 uri인코딩을 하므로 value값에 정상적인 url을 사용.
--> accessToken을 얻을 수 있게됨.
expires_in. 이시간동안 유효함을 의미.
원래는 사용자가 다시 로그인 할 수 있도록 해야 함.
이런게 불가능 할 때가 있음.
일시적은 상관없지만.
지정안하거나 online으로.

offline의Type설정의 장점은 submit시 refrestToken이 오고 accessToken을 재발급 받을 수 있게 됨.
revoking a token
Account Setting링크를 선택
계정에 연결된 앱이 나옴.
해당 프로젝트 선택을 취소함.
다시 api허용부터 받아야 함.
이후 refreshToken을 받게 됨.
이후부턴 또 다시 없음
사용자가 허용한 단 한번만 받으므로.
테스트시에는 취소해서 다시 받아야됨.
사용자에게는 허용을 하고 submit을 하면 refreshToken을 accsesToken과 똑같이, 매우매우 소중하게 보관해야 함.

---

accessToken.
이를 이용해 실제 데이터를 가져오는 방법.

사용 -> key를 access_token으로
받아들인 값을 붙여넣기.
데이터를 가져올 수 있게 됨.

다른방법은 헤더값에 넣는 방식.
curl이 되야됨.
움

---

refreshToken사용.
만료시 사용법.
사용자 인증 명시했을때, 단 한번만 발행됨.

refreshing on access-Token.

POST.
submit시 기존의 access_Token을 재발급 할 수 있음.
여러번 가능한듯.

----

정리.
1) owner가 인증요청을 할 수 있도록 owner에게 url을 제공했었음.
resourceserver로 보낼 수 있도록 url을 생성했었음.
직접 만드는것은 문제가 생길 수 있기때문에 각자 자신의 언어에 맞는 SDK를 찾아서 사용.
결과적으로 url을 얻어내면 됨.
1~2번. 인증하러 가는 부분까지.
2) scope리스트를 보면서 해도되는지 물어보고, 승인버튼을 누르게 되면 주어진 redirecturl에 authorizedCode를 전달.
3) 요청을 생성. 사용자에게 노출되면 안되므로. 음... step5.
4) 메서드를 사용하여 accesToken을 얻음.
offline Type이였다면 refreshToken도 얻을 수 있을것임.
내부적으로 조용히 서버쪽에서 알아서 처리해야되는 부분임.
5) client에 accessToken을 세팅하고, 어덯게 메서드를 호출하네용...
음..
예시 파일이 나와있음 음..










